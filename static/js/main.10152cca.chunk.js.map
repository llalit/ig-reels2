{"version":3,"sources":["VideoHeader.js","videoCardBottom.js","VideoCard.js","firebase.js","App.js","serviceWorker.js","index.js"],"names":["VideoHeader","className","VideoCardBottom","channel","song","likes","shares","avatarSrc","Avatar","src","Button","mode","index","fontSize","fontsize","VideoCard","video","url","useState","isVideoPlaying","setisVideoPlaying","videoRef","useRef","class","loop","ref","onClick","current","pause","play","db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","App","reels","setReels","useEffect","collection","onSnapshot","snapshot","docs","map","doc","data","alt","console","log","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.10152cca.chunk.js","sourcesContent":["import React from 'react'\r\nimport './videoheader.css';\r\nimport ArrowBackIosIcon from '@material-ui/icons/ArrowBackIos';\r\nimport CameraAltIcon from '@material-ui/icons/CameraAlt';\r\n\r\nfunction VideoHeader() {\r\n    return (\r\n        <div className=\"header__reels\">\r\n            \r\n            <ArrowBackIosIcon />\r\n\r\n            <h3>Reels</h3>\r\n\r\n            <CameraAltIcon />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoHeader\r\n","import React from 'react'\r\nimport './videofooter.css';\r\nimport MusicNoteIcon from '@material-ui/icons/MusicNote';\r\nimport Ticker from 'react-ticker';\r\nimport { Button, Avatar } from '@material-ui/core';\r\n\r\nimport FavoriteIcon from '@material-ui/icons/Favorite';\r\nimport ModeCommentIcon from '@material-ui/icons/ModeComment';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport MoreHorizIcon from '@material-ui/icons/MoreHoriz';\r\n\r\n\r\n\r\nfunction VideoCardBottom({channel, song,   likes,    shares, avatarSrc}) {\r\n    return (\r\n        <div className=\"videoFooter\">\r\n           <div className=\"videoFooter__text\">\r\n\r\n               <Avatar src={avatarSrc}/>\r\n                <h3>\r\n                    {channel} â€¢ <Button><p className=\"follow__button\">Follow</p></Button>\r\n                </h3>\r\n           </div>\r\n\r\n           <div className=\"videoFooter__ticker\">\r\n\r\n               <MusicNoteIcon  className=\"videoFooter__icon\"\r\n                   />\r\n               <Ticker mode=\"smooth\">\r\n                    {({index})=>(\r\n                        <>\r\n                            <h1>{song}</h1>\r\n                        </>\r\n                    )}\r\n               </Ticker>\r\n           </div>\r\n\r\n           <div className=\"videoFooter__actions\">\r\n\r\n               <div className=\"videoFooter__actionLeft\">\r\n                      <FavoriteIcon fontSize=\"large\" />\r\n                      <ModeCommentIcon fontSize=\"large\" />\r\n                      <SendIcon fontSize=\"large\" />\r\n                      <MoreHorizIcon fontsize='large' />  \r\n               </div>\r\n\r\n               <div className=\"videoFooter__actionRight\">\r\n\r\n                       <div className=\"videoFooter__stat\">\r\n                            <FavoriteIcon />\r\n                            <p>{likes}</p>   \r\n                        </div> \r\n\r\n                        <div className=\"videoFooter__stat\">\r\n                            <ModeCommentIcon />\r\n                            <p>{shares}</p>\r\n                        </div>\r\n               </div>\r\n           </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoCardBottom;\r\n","import React, { useState, useRef } from 'react'\r\nimport './videoCard.css';\r\nimport VideoHeader from './VideoHeader';\r\nimport VideoCardBottom from './videoCardBottom';\r\n\r\n\r\nfunction VideoCard({ video, channel, shares, song, url , likes, avatarSrc}) {\r\n\r\n    const [isVideoPlaying, setisVideoPlaying] = useState(false);\r\n\r\n    const  videoRef = useRef(null);\r\n\r\n    const onVideoPress=()=>{\r\n        if(isVideoPlaying){\r\n            //videopause()\r\n            videoRef.current.pause();\r\n            setisVideoPlaying(false);\r\n        }\r\n        else{\r\n            videoRef.current.play(); \r\n            setisVideoPlaying(true);\r\n        }\r\n    }\r\n    \r\n    return (\r\n\r\n        <div className=\"maincard\">\r\n\r\n            <div class=\"video__container\">\r\n\r\n                <VideoHeader />\r\n\r\n\r\n\r\n                <video\r\n                    loop\r\n                    ref={videoRef}\r\n                    onClick={onVideoPress}\r\n                    className=\"reels__video\"\r\n                    src={video}\r\n                    \r\n                    />\r\n\r\n                \r\n                    <VideoCardBottom  \r\n                        url={url}\r\n                        song={song}\r\n                        channel={channel}\r\n                        likes={likes}\r\n                        shares={shares}\r\n                        avatarSrc={avatarSrc}\r\n                    />\r\n\r\n            </div>\r\n\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VideoCard;\r\n","import firebase from 'firebase';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyAYkX0nRl_2xd2yCWS_n73j33G6sSG28y0\",\r\n    authDomain: \"reels-instagram.firebaseapp.com\",\r\n    databaseURL: \"https://reels-instagram.firebaseio.com\",\r\n    projectId: \"reels-instagram\",\r\n    storageBucket: \"reels-instagram.appspot.com\",\r\n    messagingSenderId: \"471143317752\",\r\n    appId: \"1:471143317752:web:76375f364c1841eecebb0d\",\r\n    measurementId: \"G-Q57YZNX5LV\"\r\n  };\r\n\r\n\r\nconst firebaseApp= firebase.initializeApp(firebaseConfig);\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport default db; \r\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport VideoCard from './VideoCard';\nimport db from './firebase';\n\nfunction App() {\n\n  const [reels, setReels] = useState([]);\n \n  \n  useEffect(() => {\n    //App component will runs ONCE when it loads\n    db.collection('reels').onSnapshot(snapshot=>(\n      setReels(snapshot.docs.map(doc => doc.data()))\n      ))\n  },[])\n  \n  return (\n    <div className=\"app\">\n      <div className=\"app__logo\">\n\n        <img className=\"ig__logo\" src=\"https://www.logo.wine/a/logo/Instagram/Instagram-Logo.wine.svg\" alt=\"IG__logo\" />\n\n        <h3>\n          Reels clone\n        </h3>\n      </div>\n\n\n      <div className=\"app__videos\">\n        {console.log(reels)}\n\n        \n        {reels.map(({video,song,avatarSrc,likes,shares,channel})=>(  \n          <VideoCard \n            video={video}\n            song={song}\n            avatarSrc={avatarSrc}\n            likes={likes}\n            shares={shares}\n            channel={channel}\n          />\n        ))}\n      </div>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}